(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["recursive"],{e29e:function(n,e,i){"use strict";i.r(e);var t=function(){var n=this,e=n.$createElement,i=n._self._c||e;return i("div",{staticClass:"page"},[i("div",[i("h3",[n._v("递归场景")]),i("div",{staticClass:"ins-text"},[n._v("主要应对多级菜单，多级分类，如以下场景：")]),i("pre",[n._v("      "),i("code",[n._v(n._s(n.code1))]),n._v("\n      ")]),i("div",{staticClass:"ins-text"},[n._v("看到这个很多人会想到这个实现起来很简单啊，来个嵌套循环不就完事了。")]),i("div",{staticClass:"text"},[n._v("对，你说的没错，事实就是这样简单。基于上面的数据格式，我们的实现方式如下：")]),i("pre",[n._v("        "),i("code",[n._v(n._s(n.code2))]),n._v("\n      ")]),i("div",{staticClass:"ins-text"},[n._v("如果有一天我们数据多了一级分类，变成现在这样")]),i("pre",[n._v("        "),i("code",[n._v(n._s(n.code3))]),n._v("\n      ")]),i("div",{staticClass:"ins-text"},[n._v("既然产品有需求数据有变化，那么我们就改代码吧，于是我们在原有的代码上继续加上一层嵌套循环，这次又总算完成了，但是可能没过两天我们的数据又增加了一级分类怎么办？还是继续嵌套下去？ ")]),i("div",{staticClass:"text"},[n._v("我们不排除这种存在的可能，那如果我们遇到这种情况怎么办？这里就要用到我们说的 递归组件 了")]),i("div",{staticClass:"text"},[n._v("什么是递归组件？简单来说就是在组件中内使用组件本身，下面我们就来看看如何在项目中使用递归组件去解决我们上面问题。")]),i("pre",[n._v("      "),i("code",[n._v(n._s(n.code4))]),n._v("\n    ")]),i("div",{staticClass:"text",staticStyle:{"margin-bottom":"20px"}},[n._v("我们来看一下两次数据渲染的结构及样式")]),i("List",{attrs:{list:n.list}})],1)])},s=[],a=(i("d3b7"),{name:"",props:[""],components:{List:function(){return i.e("chunk-39b5ce73").then(i.bind(null,"022e"))}},data:function(){return{code1:'list: [{\n    name: "普通",\n    children: [{\n        name: "现代"\n    }, {\n        name: "吉利"     \n    }]\n}, {\n    name: "豪华",\n    children: [{\n        name: "奔驰"\n    }, {\n        name: "宝马"     \n    }]\n}]',code2:'<div class="list-item" v-for="(item, index) in list" :key="index">\n  <div class="item-name">\n    <span>{{item.name}}</span>\n  </div>\n  <div v-if="item.children" class="children-item">\n    <div v-for="(child, index) in item.children" :key="index">\n      <div class="item-name">\n        <span>{{child.name}}</span>\n      </div>\n    </div>\n  </div>\n</div>',code3:'list: [\n  {\n      name: "普通",\n      children: [{\n          name: "现代",\n          children: [{\n              name: "现代Cs5-plus"\n          }, {\n              name: "北京现代"     \n          }]\n      }, {\n          name: "吉利",\n          children: [{\n              name: "吉利ICON"\n          }, {\n              name: "吉利帝豪"     \n          }]\n      }]\n  },\n  {\n      name: "豪华",\n      children: [{\n          name: "奔驰",\n          children: [{\n              name: "奔驰S级"\n          }, {\n              name: "奔驰A级"  \n          }]   \n      }]\n  }\n]',code4:'<div class="list-item" v-for="(item, index) in list" :key="index">\n    <div class="item-name">\n        <span>{{item.name}}</span>\n    </div>\n    <div v-if="item.children" class="children-item">\n        <list :list="item.children"></list>\n    </div>\n</div>',list:[{name:"普通",children:[{name:"现代",children:[{name:"现代Cs5-plus"},{name:"北京现代"}]},{name:"吉利",children:[{name:"吉利ICON"},{name:"吉利帝豪"}]}]},{name:"豪华",children:[{name:"奔驰",children:[{name:"奔驰S级"},{name:"奔驰A级"}]}]}]}},created:function(){},mounted:function(){},methods:{}}),d=a,c=i("2877"),l=Object(c["a"])(d,t,s,!1,null,null,null);e["default"]=l.exports}}]);
//# sourceMappingURL=recursive.1eaee0de.js.map